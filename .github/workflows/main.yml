# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    #branches: [ master ]
  pull_request:
    #branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Configure the board matrix
    strategy:
      fail-fast: false
      matrix:
        board: [
          "multi4in1:avr:multiatmega328p:bootloader=none", 
          "multi4in1:avr:multiatmega328p:bootloader=optiboot", 
          "multi4in1:avr:multixmega32d4", 
          "multi4in1:stm32f1:multi5in1t18int", 
          "multi4in1:stm32f1:multistm32f103cb:debug_option=none", 
          "multi4in1:stm32f1:multistm32f103cb:debug_option=native", 
          "multi4in1:stm32f1:multistm32f103cb:debug_option=ftdi", 
          "multi4in1:stm32f1:multistm32f103c8:debug_option=none"
        ]

    # Set the environment variables
    env:
      BOARD: ${{ matrix.board }}
      IDE_VERSION: 1.8.9

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Install Arduino CLI
        uses: arduino/setup-arduino-cli@v1.1.1
      
      - name: Install Arduino IDE
        run: | 
          wget -nv http://downloads.arduino.cc/arduino-$IDE_VERSION-linux64.tar.xz
          tar xf arduino-$IDE_VERSION-linux64.tar.xz
          mv arduino-$IDE_VERSION $HOME/arduino-ide
          echo "$HOME/arduino-ide" >> $GITHUB_PATH
      
      - name: Configure Build Environment
        run: |
          arduino-cli core update-index
          if [[ "$BOARD" =~ "multi4in1:avr:" ]]; then
            arduino-cli core install arduino:avr;
          fi

          if [[ "$BOARD" =~ "multi4in1:stm32f1:" ]]; then
            wget http://downloads.arduino.cc/gcc-arm-none-eabi-4.8.3-2014q1-linux64.tar.gz
            tar xzf gcc-arm-none-eabi-4.8.3-2014q1-linux64.tar.gz
            mv gcc-arm-none-eabi-4.8.3-2014q1 $HOME/gcc-arm-none-eabi
          fi
          
          mkdir -p $HOME/arduino-ide/hardware/multi4in1/
          cp -r ${GITHUB_WORKSPACE}/source/avr $HOME/arduino-ide/hardware/multi4in1/avr
          cp -r ${GITHUB_WORKSPACE}/source/stm32 $HOME/arduino-ide/hardware/multi4in1/stm32f1
          
          mkdir -p $HOME/Arduino/
          ln -s $HOME/arduino-ide/hardware $HOME/Arduino/hardware
          
          chmod +x ${GITHUB_WORKSPACE}/buildroot/bin/*
          echo "${GITHUB_WORKSPACE}/buildroot/bin" >> $GITHUB_PATH
          
      - name: Clone MULTI-Module firmware source
        run: git clone https://github.com/pascallanger/DIY-Multiprotocol-TX-Module.git

      - name: Configure MULTI-Module firmware options
        run: |
          A7105_PROTOCOLS=$(sed -n 's/[\/\/]*[[:blank:]]*#define[[:blank:]]*\([[:alnum:]_]*_A7105_INO\)\(.*\)/\1/p' DIY-Multiprotocol-TX-Module/Multiprotocol/_Config.h)
          CC2500_PROTOCOLS=$(sed -n 's/[\/\/]*[[:blank:]]*#define[[:blank:]]*\([[:alnum:]_]*_CC2500_INO\)\(.*\)/\1/p' DIY-Multiprotocol-TX-Module/Multiprotocol/_Config.h)
          CYRF6936_PROTOCOLS=$(sed -n 's/[\/\/]*[[:blank:]]*#define[[:blank:]]*\([[:alnum:]_]*_CYRF6936_INO\)\(.*\)/\1/p' DIY-Multiprotocol-TX-Module/Multiprotocol/_Config.h)
          NRF24L01_PROTOCOLS=$(sed -n 's/[\/\/]*[[:blank:]]*#define[[:blank:]]*\([[:alnum:]_]*_NRF24L01_INO\)\(.*\)/\1/p' DIY-Multiprotocol-TX-Module/Multiprotocol/_Config.h)
          SX1276_PROTOCOLS=$(sed -n 's/[\/\/]*[[:blank:]]*#define[[:blank:]]*\([[:alnum:]_]*_SX1276_INO\)\(.*\)/\1/p' DIY-Multiprotocol-TX-Module/Multiprotocol/_Config.h)

          # Get the full set of protocols for each board
          if [[ "$BOARD" =~ "multi4in1:avr:multixmega32d4" ]]; then
            ALL_PROTOCOLS=$(echo $CYRF6936_PROTOCOLS);
          elif [[ "$BOARD" =~ "multi4in1:avr:multiatmega328p:" ]]; then
            ALL_PROTOCOLS=$(echo $A7105_PROTOCOLS $CC2500_PROTOCOLS $CYRF6936_PROTOCOLS $NRF24L01_PROTOCOLS);
          elif [[ "$BOARD" =~ "multi4in1:stm32f1:" ]]; then
            ALL_PROTOCOLS=$(echo $A7105_PROTOCOLS $CC2500_PROTOCOLS $CYRF6936_PROTOCOLS $NRF24L01_PROTOCOLS $SX1276_PROTOCOLS);
          fi

          # Disable CHECK_FOR_BOOTLOADER when not needed
          if [[ "$BOARD" == "multi4in1:avr:multiatmega328p:bootloader=none" ]]; then
            opt_disable CHECK_FOR_BOOTLOADER;
          fi

          # Trim the build down for the Atmega328p board
          if [[ "$BOARD" =~ "multi4in1:avr:multiatmega328p:" ]]; then
            opt_disable $ALL_PROTOCOLS
            opt_enable FRSKYX_CC2500_INO AFHDS2A_A7105_INO MJXQ_NRF24L01_INO DSM_CYRF6936_INO;
          fi

          # Trim the enabled protocols down for the STM32F103CB board with debugging or the STM32F103C8 board in general
          if [[ "$BOARD" == "multi4in1:stm32f1:multistm32f103cb:debug_option=ftdi" ]] || [[ "$BOARD" == "multi4in1:stm32f1:multistm32f103cb:debug_option=native" ]] || [[ "$BOARD" =~ "multi4in1:stm32f1:multistm32f103c8" ]]; then
            opt_disable $ALL_PROTOCOLS;
            opt_enable FRSKYX_CC2500_INO AFHDS2A_A7105_INO MJXQ_NRF24L01_INO DSM_CYRF6936_INO;
          fi

      - name: Configuration diff
        run: |
          pushd DIY-Multiprotocol-TX-Module/
          git diff Multiprotocol/_Config.h
          popd
        
      - name: Arduino CLI Build
        run: buildMultiCli

      - name: Arduino IDE Build
        run: buildMulti
